#!/bin/sh

# "Stick to portable constructs where possible, and you will make somebody's life easier in the future. Maybe your own."

# this outputs an inital small loader which can be sourced for each 'class', e.g. for class 'wifi':
#
# idee: methode 'unload' ?
# idee: methode help?
# idee: $FUNCNAME fuellen ODER alle Vorkommen von FUNCNAME durch realen zur "compile-zeit" ersetzen
# idee: passend zur klasse automatisch einen bestimmten variablensatz aktivieren (z.b. $INTRANET bei pfilter)?
# idee: statistik anzeigen lassen per befehl: sed -n "s/^\(.*\) ().*/\1/p" $BASEDIR/${CLASS} | wc -l | sed 's/ //g'
# idee: netparam ohne *MTU|BRC|OLSR|MSK|LO*
# todo: option zum entfernen aller logmeldungen? (bzw. nur log-debug)
# todo: lade-log an/aus (loader/realclass)

. $0.functions

OLDIFS="$IFS"; IFS=". "; read UP1 UP2 NOP </proc/uptime; IFS="$OLDIFS"

DEBUG="$1"			# keyword "debug" or empty
BASEDIR="/etc/kalua"		# scriptbase, simply throw your 'class'-files here e.g. wifi
POOLDIR="/tmp/kalua"
LOADER="/tmp/loader_$$"
LOADER_FINAL="/tmp/loader"	# scripts can source this file and automatically use all 'classes'

ls /tmp/loader_* 2>/dev/null && {
	logger -s "$0: ignoring call - please remove /tmp/loader_*"
	exit 0
}

[ -d "${BASEDIR}.w" ] && {
	cd "${BASEDIR}.w"
	rm -fR *
}

mkdir -p "$POOLDIR"

echo  >"$LOADER" "# generated by $0"
echo >>"$LOADER" "case \"\$LODEV\" in lo) return 0;; esac"	# when doing '. /tmp/loader' stop parsing, if already loaded
echo >>"$LOADER" "_(){ ls -1 $POOLDIR|sort|sed 's/^/_/';}"
# echo >>"$LOADER" "x(){ . $POOLDIR/\$1;}"			# safes 350 bytes in combination with [3], but i like the speedcode

for CLASS in $( find $BASEDIR -type f -name "[a-z]"* ); do {	# only include lowercase names
	CLASS="$( basename $CLASS )"				# generate loader and add methods 'show'+'include'

	# normal output is like:
	# "$1" "$2" "$3"	// the first element is later cut off via "${MAX_ARGS#* }"
	MAX_ARGS="$( kalua_max_args "$BASEDIR/$CLASS" )"

	[ "$DEBUG" = "debug" ] && {
		DEBUG1="logger -- working in _$CLASS, calling \$1 with args ${MAX_ARGS#* };"	# omit first ARG
		DEBUG2="logger -- including _$CLASS subfunc \$1;"
		DEBUG3="|| logger -t $CLASS -s \"invalid call: \$1\""
	}

	HASH="$( md5sum "$BASEDIR/$CLASS" )"
	HASH="${HASH%% *}"

	class_needs_new_build()
	{
		test -e "$POOLDIR/${CLASS}" || return 0
		sh -n "$POOLDIR/${CLASS}" || return 0
		grep -qs "$CLASS $HASH" "$POOLDIR/CHECKSUMS" || return 0

		return 1
	}

	class_needs_new_build && {
		cat >"$POOLDIR/${CLASS}" <<EOF
_${CLASS}(){ ${DEBUG1}_${CLASS}_\${1:-s} ${MAX_ARGS#* }${DEBUG3};}
_${CLASS}_show(){ sed -n "s/\(_${CLASS}_.*\)()/\1/p" $BASEDIR/${CLASS}|sort ;}
_${CLASS}_s(){ _${CLASS}_show ;}
_${CLASS}_include(){ :;}
EOF
		if [ -d "${BASEDIR}.w" ]; then
			# lowmem: direct call copy on disc:"
			echo >>"$POOLDIR/${CLASS}" ". $BASEDIR/$CLASS"
		else
			# fixme! do it *fast* when booting, and then do it *good-but-slow* after booting
			_kalua_strip_script "$BASEDIR/$CLASS" "$CLASS" "$DEBUG" >>"$POOLDIR/${CLASS}"
		fi

		# remove maybe old checksum
		[ -e "$POOLDIR/CHECKSUMS" ] && sed -i "/^$CLASS /d" "$POOLDIR/CHECKSUMS"

		if sh -n "$POOLDIR/${CLASS}"; then
			echo "$CLASS $HASH" >>"$POOLDIR/CHECKSUMS"
		else
			DEBUG="compile_error"
		fi
	}

	case "$DEBUG" in
		compile_error)
			DEBUG=
			echo >>"$LOADER" "_${CLASS}(){ logger -s -- CLASSERROR: _$CLASS \$@ ;}"
		;;
		debug)
			. "$POOLDIR/${CLASS}"
			echo >>"$LOADER" "_${CLASS}(){ . $POOLDIR/$CLASS;${DEBUG2}_${CLASS} ${MAX_ARGS}${DEBUG3};}"
		;;
		*)
# [3]			echo >>"$LOADER" "_${CLASS}(){ _=${CLASS};x \$_;${DEBUG2}_\${_}_\${1:-s} ${MAX_ARGS#* };}"
			echo >>"$LOADER" "_${CLASS}(){ . $POOLDIR/$CLASS;${DEBUG2}_${CLASS}_\${1:-s} ${MAX_ARGS#* };}"
		;;
	esac

	# include GLOBAL_VARS which must be in head-section of CLASS, e.g. MYVAR=123
	case "$( head -n1 "/etc/kalua/$CLASS" )" in
		'#!/bin/sh'*)
			sed -n "2,/^_$CLASS/p" "/etc/kalua/$CLASS" | grep ^"[A-Z]" >>"$LOADER"
		;;
	esac
} done

[ -e "$0.user" ] && . "$0.user" >>"$LOADER"

mv "$LOADER" "$LOADER_FINAL"
LODEV=					# override loader-optimization
. "$LOADER_FINAL"			# fixme! rely on external functions _log + _file ?

OLDIFS="$IFS"; IFS=". "; read UP3 UP4 NOP </proc/uptime; IFS="$OLDIFS"
TIME="$(( $UP3$UP4 - $UP1$UP2 ))"
test $TIME -le 99 && TIME="0$TIME"
TIME="$( echo $TIME | sed 's/^\(.*\)\(..\)$/\1.\2/' )sec"	# 386ms -> 3.86sec

_log it gen_loader daemon info "[OK] done '$LOADER_FINAL' (in $TIME, using $( _file discusage $POOLDIR ) bytes in $POOLDIR) - you MUST reinclude the new loader with 'LODEV= . $LOADER_FINAL' if this is an interactive shell"
